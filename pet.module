<?php

/**
 * @file
 * Previewable E-mail Template module.
 */

/**
 * Implements hook_menu().
 */
function findmepet_menu() {
}

/**
 * Implements hook_entity_info().
 */
function pet_entity_info() {
  $return = array(
    'pet' => array(
      'label' => t('Previewable E-mail Template'),
      'plural label' => t('Previewable E-mail Templates'),
      'description' => t('Create email templates with token and rules support and optionally preview them before sending.'),
      'entity class' => 'PET',
      'controller class' => 'EntityAPIControllerExportable',
      'base table' => 'pets',
      'fieldable' => FALSE,
      'exportable' => TRUE,
      'entity keys' => array(
        'name' => 'name',
        'id' => 'pid',
        'label' => 'title',
        'status' => 'status',
      ),
      'load hook' => 'pet_load',
      'uri callback' => 'pet_uri',
      'module' => 'pet',
      'access callback' => 'pet_access',
      'admin ui' => array(
        'path' => 'admin/structure/pets',
        'file' => 'pet.admin.inc',
        'file path' => drupal_get_path('module', 'pet') . '/includes',
        'controller class' => 'PETUIController',
      ),
    ),
  );

  return $return;
}

/**
 * Access callback for the entity API.
 */
function pet_access($op, $type = NULL, $account = NULL) {
  return user_access('administer previewable email templates', $account);
}

/**
 * Implements hook_permission().
 */
function pet_permission() {  
  $permissions = array(
    'administer previewable email templates' =>  array(
      'title' => t('Administer previewable email templates'),
      'description' => t('Create, edit and delete previewable email templates.'),
    ),
    'use previewable email templates' =>  array(
      'title' => t('Use previewable email templates'),
      'description' => t('Use previewable email templates.'),
    ),
  );
  return $permissions;
}

/**
 * The class used for PET entities.
 */
class PET extends Entity {

  public $pid;
  public $name;
  public $title;
  public $subject;
  public $body;
  public $from_override;
  public $cc_default;
  public $bcc_default;
  public $recipient_callback;
  public $object_types;

  public function __construct($values = array()) {
    parent::__construct($values, 'pet');
  }
}

/**
 * PET UI controller.
 */
class PETUIController extends EntityDefaultUIController {
  /**
   * Overrides hook_menu() defaults.
   */
  public function hook_menu() {
    $items = parent::hook_menu();
    $items[$this->path]['description'] = 'Create email templates with token and rules support and optionally preview them before sending.';
    return $items;
  }
}

/**
 * Loads a PET by ID.
 */
function pet_load($pid) {
  $pets = pet_load_multiple(array($pid), array());
  return $pets ? reset($pets) : FALSE;
}

/**
 * Loads multiple PETs by ID or based on a set of conditions.
 *
 * @see entity_load()
 *
 * @param $pids
 *   An array of PET IDs.
 * @param $conditions
 *   An array of conditions on the {pets} table in the form
 *     'field' => $value.
 * @param $reset
 *   Whether to reset the internal PET loading cache.
 *
 * @return
 *   An array of PET objects indexed by pid.
 */
function pet_load_multiple($pids = array(), $conditions = array(), $reset = FALSE) {
  return entity_load('pet', $pids, $conditions, $reset);
}

/**
 * Entity uri callback.
 */
function pet_uri($pet) {
  return array(
    'path' => 'pet/' . $pet->name,
  );
}
