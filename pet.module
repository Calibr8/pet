<?php

/**
 * @file
 * Previewable E-mail Template module.
 */

/**
 * Implements hook_menu().
 */
function findmepet_menu() {
}

/**
 * Implements hook_entity_info().
 */
function pet_entity_info() {
  $return = array(
    'pet' => array(
      'label' => t('Previewable E-mail Template'),
      'plural label' => t('Previewable E-mail Templates'),
      //'controller class' => 'PETController',
      'controller class' => 'EntityAPIController',
      //'controller class' => 'EntityAPIControllerExportable',
      'base table' => 'pets',
      'fieldable' => FALSE,
      'entity keys' => array(
        'id' => 'pid',
        'label' => 'title',
      ),
      //'load hook' => 'pet_load',
      'label callback' => 'entity_class_label',
      'uri callback' => 'entity_class_uri',
      'module' => 'pet',
      'access callback' => 'pet_access',
      // Enable the entity API's admin UI.
      'admin ui' => array(
        'path' => 'admin/config/workflow/pet',
        //'file' => 'profile2.admin.inc',
        'controller class' => 'EntityDefaultUIController',
      ),
    ),
  );

  return $return;
}

/**
 * Access callback for the entity API.
 */
function pet_access($op, $type = NULL, $account = NULL) {
  return user_access('administer previewable email templates', $account);
}

/**
 * Implements hook_permission().
 */
function pet_permission() {  
  $permissions = array(
    'administer previewable email templates' =>  array(
      'title' => t('Administer previewable email templates'),
      'description' => t('Create, edit and delete previewable email templates.'),
    ),
    'use previewable email templates' =>  array(
      'title' => t('Use previewable email templates'),
      'description' => t('Use previewable email templates.'),
    ),
  );
  return $permissions;
}

/**
 * Controller class for PETs.
 *
 * This extends the DrupalDefaultEntityController class, adding required
 * special handling for PET objects.
 */
class PETController extends DrupalDefaultEntityController {

  protected function buildQuery($ids, $conditions = array(), $revision_id = FALSE) {
    $query = parent::buildQuery($ids, $conditions, $revision_id);
    $query->orderBy('base.name');
    return $query;
  }
}
