<?php
// $Id$

/**
 * @file
 * Previewable E-mail Template module.
 */

/**
 * Implementation of hook_init()
 */
function pet_init() {
  drupal_add_css(drupal_get_path('module', 'pet') . '/pet.css');
}

/**
 * Implementation of hook_menu().
 */
function pet_menu() {
  $items = array();

  $items['admin/build/pets'] = array(
    'title' => 'Previewable email templates',
    'page callback' => 'pet_admin_page',
    'access callback' => 'user_access',
    'access arguments' => array('administer previewable email templates'),
    'description' => 'Configure previewable email templates with token support.',
    'file' => 'pet.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/build/pets/edit'] = array(
    'title' => 'Edit previewable email templates',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pet_add_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer previewable email templates'),
    'file' => 'pet.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/build/pets/delete'] = array(
    'title' => 'Delete previewable email templates',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pet_delete_confirm'),
    'access callback' => 'user_access',
    'access arguments' => array('administer previewable email templates'),
    'file' => 'pet.admin.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/build/pets/list'] = array(
    'title' => 'List',
    'page callback' => 'pet_admin_page',
    'access callback' => 'user_access',
    'access arguments' => array('administer previewable email templates'),
    'file' => 'pet.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );
  $items['admin/build/pets/add'] = array(
    'title' => 'Add',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pet_add_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer previewable email templates'),
    'file' => 'pet.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['pet/%pet'] = array(
    'title callback' => 'pet_page_title',
    'title arguments' => array(1),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pet_user_form', 1),
    'access callback' => 'user_access',
    'access arguments' => array('use previewable email templates'),
    'file' => 'pet.admin.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_perm().
 */
function pet_perm() {
  return array(
    'administer previewable email templates',
    'use previewable email templates',
  );
}

/**
 * Implementation of hook_theme().
 */
function pet_theme() {
  return array(
    'pet_admin_page' => array(
      'arguments' => array('pets' => NULL),
    ),
  );
}

/**
 * Return one PET.
 */
function pet_load($name) {
  return db_fetch_object(db_query("SELECT * FROM {pets} WHERE name='%s'", $name));
}

/**
 * API call to insert a new PET into the database.  
 * 
 * @param $pet 
 *   PET object identical to the one returned by pet_load.
 */
function pet_insert($pet) {
  db_query("INSERT INTO {pets} (name, title, subject, body, object_types, recipient_callback) VALUES ('%s', '%s', '%s', '%s', '%s', '%s')", $pet->name, $pet->title, $pet->subject, $pet->body, $pet->object_types, $pet->recipient_callback);
}

/**
 * Title callback for form template page.
 */
function pet_page_title($pet) {
  return $pet->title;
}

/**
 * Send tokenized email to each recipient.  Called once form passes validation.  Can also be
 * called directly from code.
 *
 * @param $name
 *   The unique name of the PET template.
 * @param $recipients
 *   An array of at least one recipient in the form <uid>|<email> where uid may be empty.
 * @param $nid
 *   An optional node id for token substitutions.
 * @param $subject
 *   An optional subject which if provided will override the subject in the PET.
 * @param $body
 *   An optional body which if provided which will override the body in the PET.
 */
function pet_send_mail($name, $recipients, $nid = NULL, $subject = NULL, $body = NULL) {
  $pet = pet_load($name);
  if (!$pet) {
    watchdog('pet', 'Unable to load PET %name.', array('%name' => $name));
    return;
  }
  if (!is_array($recipients) || count($recipients) < 1) {
    watchdog('pet', 'At least one recipient must be provided for PET %name.', array('%name' => $name));
    return;
  }
  
  // Override subject and body if necessary
  $subject = $subject ? $subject : $pet->subject;
  $body = $body ? $body : $pet->body;
  
  // Store recipients in params in case a module wants to act on them somehow
  $params['pet_recipients'] = $recipients;
  
  // Make this configurable?
  $from = variable_get('site_mail', $GLOBALS['site_mail']);
  
  foreach ($recipients as $recipient) {
    list($uid, $mail) = explode('|', $recipient);
    $subs = pet_substitutions($pet, $nid, $uid);
    $params['subject'] = token_replace_multiple($subject, $subs);
    $params['body'] = token_replace_multiple($body, $subs);
    drupal_mail('pet', $pet->name, $mail, language_default(), $params, $from);
  }
}

/**
 * Return the custom token types for this PET user.  If no user, no user tokens.
 */
function pet_substitutions($pet, $nid, $uid) {
  // Standard substitutions
  $subs['global'] = NULL;
  if (!empty($uid)) {
    $user = user_load(array('uid' => $uid));
    $subs['user'] = $user;
  }
  if (!empty($nid)) {
    $node = node_load($nid);
    $subs['node'] = $node;
  }
  
  // Custom substitutions
  $pairs = explode("\n", $pet->object_types);
  foreach ($pairs as $pair) {
    list($type, $object) = explode('|', $pair);
    $object = trim($object);
    if ($object == 'node' && !empty($nid)) {
      $subs[$type] = $node;
    }
    elseif ($object == 'user' && !empty($uid)) {
      $subs[$type] = $user;
    }
    else {
      $subs[$type] = NULL;
    }
  }
  return $subs;
}

/**
 * Implementation of hook_mail()
 *
 * To customize, e.g. to change the content type to text/html etc, you can use hook_mail_alter()
 * in one of your modules.
 */
function pet_mail($key, &$message, $params) {
  $message['subject'] = $params['subject'];
  $message['body'][] = $params['body'];
}

